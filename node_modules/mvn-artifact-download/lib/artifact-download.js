"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const mvn_artifact_filename_1 = __importDefault(require("mvn-artifact-filename"));
const mvn_artifact_name_parser_1 = __importDefault(require("mvn-artifact-name-parser"));
const mvn_artifact_url_1 = __importDefault(require("mvn-artifact-url"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const path_1 = __importDefault(require("path"));
function pipeToFile(body, destFile) {
    return new Promise((resolve, reject) => {
        const file = fs_1.default.createWriteStream(destFile);
        file.on('finish', () => {
            file.close();
            resolve(destFile);
        });
        file.on('error', (err) => {
            fs_1.default.unlink(destFile, function ignore() { });
            reject(err);
        });
        body.pipe(file);
    });
}
exports.default = (async function download(artifact, destination, repository, filename, fetchOptions = {}) {
    destination = destination || process.cwd();
    const artifactShape = typeof artifact === 'string' ? mvn_artifact_name_parser_1.default(artifact) : artifact;
    const url = await mvn_artifact_url_1.default(artifactShape, repository, fetchOptions);
    const destFile = path_1.default.join(destination || process.cwd(), filename || mvn_artifact_filename_1.default(artifactShape));
    const response = await node_fetch_1.default(url, fetchOptions);
    if (response.status !== 200) {
        throw new Error(`Unable to fetch ${url}. Status ${response.status}`);
    }
    await pipeToFile(response.body, destFile);
    return destFile;
});
