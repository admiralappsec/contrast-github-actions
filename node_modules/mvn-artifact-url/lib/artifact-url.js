"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mvn_artifact_filename_1 = __importDefault(require("mvn-artifact-filename"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const parseXmlString_1 = __importDefault(require("./parseXmlString"));
function groupPath(artifact) {
    return [
        artifact.groupId.replace(/\./g, '/'),
        artifact.artifactId,
        artifact.version + (artifact.isSnapShot ? '-SNAPSHOT' : ''),
    ].join('/');
}
function artifactPath(artifact) {
    return groupPath(artifact) + '/' + mvn_artifact_filename_1.default(artifact);
}
async function latestSnapShotVersion(artifact, basepath, fetchOptions = {}) {
    const metadataUrl = basepath + groupPath(artifact) + '/maven-metadata.xml';
    const response = await node_fetch_1.default(metadataUrl, {
        agent: fetchOptions.agent,
        timeout: fetchOptions.timeout,
    });
    if (response.status !== 200) {
        throw new Error(`Unable to fetch ${metadataUrl}. Status ${response.status}`);
    }
    const body = await response.text();
    const xml = await parseXmlString_1.default(body);
    const snapshot = xml.metadata.versioning[0].snapshot[0];
    const version = snapshot.timestamp[0] + '-' + snapshot.buildNumber[0];
    return version;
}
exports.default = (async function artifactUrl(artifact, basePath, fetchOptions = {}) {
    const prefix = basePath || 'https://repo1.maven.org/maven2/';
    if (artifact.isSnapShot) {
        const snapShotVersion = await latestSnapShotVersion(artifact, prefix, fetchOptions);
        return prefix + artifactPath({ snapShotVersion, ...artifact });
    }
    else {
        return prefix + artifactPath(artifact);
    }
});
